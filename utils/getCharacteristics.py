import numpy as np
from scipy import signal, integrate
from numpy import mean,sqrt,square

def getCharateristics(rawdata, winlen, fs):
    a = 1;
    b = [-0.0114457990402671, -0.0142146931413932, -0.0198052614320362, -0.0235585107030437, -0.0235202174195985, -0.0179214915238912, -0.00556245913035953, 0.0138009199147469, 0.0391882317750472, 0.0684064224630637, 0.0982886482589922, 0.125168408269087, 0.145484853267285, 0.156420664599323, 0.156420664599323, 0.145484853267285, 0.125168408269087, 0.0982886482589922, 0.0684064224630637, 0.0391882317750472, 0.0138009199147469, -0.00556245913035953, -0.0179214915238912, -0.0235202174195985, -0.0235585107030437, -0.0198052614320362, -0.0142146931413932, -0.0114457990402671]
    data_acf = xcorr(rawdata,unbiased=True)
    filtereddata = signal.lfilter(b, a, data_acf)
    data_acf = filtereddata[winlen*fs-1:]
    data_maxcorr = max(data_acf)

    data_rms = rms(rawdata)
    data_mean = mean(rawdata)
    data_std = np.std(rawdata, ddof=1)

    # intergrated rms
    t = [i for i in range(0, int(winlen * fs))]
    for i in range(0, int(winlen * fs)) :
        t[i] = i / fs
    data_int = integrate.cumtrapz(rawdata, t, initial=0) # scipy.integrate.cumtrapz(y, x=None, dx=1.0, axis=-1, initial=None) y:Values to integrate. x The coordinate to integrate along.  If None (default), use spacing dx
    data_int_rms = rms(data_int)

    # fft 离散傅里叶变化
    N = len(rawdata)
    NFFT = int(nextpow2(N))
    NFFT_INT = int(NFFT / 2 + 1)

    filtereddata = np.fft.fft(rawdata - data_mean, NFFT) / N
    f = fs / 2 * np.linspace(0,1,NFFT/2+1)
    #fdata_mag = 2*abs(filtereddata[:NFFT/2+1])
    fdata_mag = 2 * abs(filtereddata[:NFFT_INT])
    idx = np.argsort(-np.array(fdata_mag), kind='quicksort')
    fdata_sort = sorted(np.array(fdata_mag), reverse=True)

    # characteristics
    # character = [data_maxcorr, data_rms, data_mean, data_std, data_int_rms, fdata_sort[0], f[idx[0]]]
    character = [data_rms, data_mean, data_std, data_int_rms, fdata_sort[0], f[idx[0]]]

    return character
    # print(character)

def xcorr(x, unbiased=True):
    n = len(x)
    n_end = 2 * n - 1
    n_list = [0 for i in range(0, 2 * n - 1)]
    for i in range(0, n):
        n_list[i] = i + 1
        n_list[n_end - i - 1] = i + 1
    tmp = x - np.mean(x)
    corr = np.correlate(tmp, tmp, 'full')
    for i in range(0, n_end):
        corr[i] = corr[i] / n_list[i]
    return corr

def nextpow2(n):
    y = np.floor(np.log2(n))
    return np.power(2, y+1)

def rms(data):
    return sqrt(mean(square(data)))

if __name__ == '__main__':
    rawdata = [-0.20590134, -0.5267244, -0.4357447, 0.10055647, 0.6799533, 1.2976574, 1.9776106, 2.7102363, 3.7349546, 4.9176903, 5.717354, 5.90889, 5.60722, 4.9320555, 4.0797195, 3.5051112, 3.5625722, 3.892972, 3.8355112, 3.3614593, 2.9975405, 2.8060043, 2.456451, 1.8962077, 1.2258313, 0.80445176, 1.115698, 2.0638018, 2.2984335, 4.0462008, 4.3622355, 2.8682537, 2.4708161, 2.2457612, 2.2457612, 2.6527755, 2.695871, 2.4851813, 2.4947581, 2.5617957, 2.5187001, 2.815581, 3.0789435, 3.4715924, 3.3566709, 3.2609026, 3.193865, 3.1555579, 3.1794999, 3.1986535, 3.2752678, 3.3901896, 3.3997664, 3.265691, 3.1028855, 3.0550013, 3.145981, 3.2609026, 3.3183637, 3.3758245, 3.4332852, 3.3614593, 3.145981, 2.9352913, 2.7868507, 2.7102363, 2.743755, 2.7485435, 2.7150247, 2.719813, 2.9017725, 3.2848446, 3.5482068, 3.4715924, 3.394978, 3.4524388, 3.466804, 3.4620156, 3.4093432, 3.3854012, 3.347094, 3.122039, 3.0310593, 3.3039982, 3.4572272, 3.1890767, 2.944868, 2.9400797, 3.0119057, 3.083732, 3.1316159, 3.1124623, 3.0119057, 2.8921957, 2.7485435, 2.6384103, 2.6240451, 2.6910827, 2.7389667, 2.7581203, 2.920926, 3.0789435, 2.873042, 2.5091233, 2.4037786, 2.657564, 3.0119057, 3.016694, 2.542642, 1.8722657, 1.4652514, 1.3455414, 1.3551182, 1.6424223, 2.0446482, 2.1787236, 2.1547816, 2.2936451, 2.3511062, 2.1308396, 2.1164744, 2.3702598, 2.3750482, 2.2026656, 2.2361844, 2.4181437, 2.5139117, 2.5713725, 2.6719291, 2.657564, 2.6001031, 2.681506, 2.7724855, 2.7868507, 2.777274, 2.8107927, 2.8538885, 2.8203697, 2.8538885, 3.0119057, 3.064578, 2.896984, 2.815581, 2.566584, 2.5378537, 2.5713725, 2.5617957, 2.5139117, 2.5378537, 2.719813, 2.777274, 2.8778305, 2.8874073, 2.8634653, 2.8491, 2.743755, 2.695871, 2.6048915, 2.6001031, 2.657564, 2.705448, 2.753332, 2.858677, 2.906561, 2.7581203, 2.5713725, 2.566584, 2.695871, 2.7964275, 2.7629087, 2.633622, 2.5713725, 2.60968, 2.681506, 2.767697, 2.8395233, 2.825158, 2.7389667, 2.6623523, 2.6479871, 2.6719291, 2.7102363, 2.7389667, 2.72939, 2.695871, 2.681506, 2.6910827, 2.7150247, 2.719813, 2.7150247, 2.7150247, 2.705448, 2.7006595, 2.7006595, 2.7102363, 2.743755, 2.767697, 2.7246015, 2.6719291, 2.6767175]
    winlen = 4
    fs = 50
    getCharateristics(rawdata, winlen, fs)